// Generated by dts-bundle v0.7.3

declare module 'class-json' {
    export { Json } from 'class-json/Json';
    export { JsonConvert } from 'class-json/JsonConvert';
    export { Serializable } from 'class-json/Serializable';
    export { JsonSettings } from 'class-json/JsonSettings';
}

declare module 'class-json/Json' {
    import { IJsonConverter } from 'class-json/IJsonConverter';
    export namespace Json {
        function ignore(): (target: any, propertyKey: any, descriptor?: any) => any;
        function name(name: any): (target: any, propertyKey: any, descriptor?: any) => any;
        function type(Ctor: any, options?: any): (target: any, propertyKey: any, descriptor?: any) => any;
        function converter(Converter: Partial<IJsonConverter>): (target: any, propertyKey: any, descriptor?: any) => any;
        function stringify(): (target: any, propertyKey: any, descriptor?: any) => any;
    }
}

declare module 'class-json/JsonConvert' {
    import { JsonSettings } from 'class-json/JsonSettings';
    import { IJsonConverter } from 'class-json/IJsonConverter';
    export namespace JsonConvert {
        function toJson(model: any, settings?: JsonSettings): any;
        function fromJson<T>(json: any, Ctor: new (...args: any[]) => T, settings?: JsonSettings): any;
    }
    export const JsonConverters: IJsonConverter[];
}

declare module 'class-json/Serializable' {
    import { JsonSettings } from 'class-json/JsonSettings';
    export class Serializable<T> {
        constructor(partial?: Partial<T>);
        static fromJson(json: any, settings?: JsonSettings): any;
        toJson(settings?: JsonSettings): any;
    }
}

declare module 'class-json/JsonSettings' {
    export interface JsonSettings {
        propertyResolver?: 'camelCase' | 'underScore';
    }
}

declare module 'class-json/IJsonConverter' {
    import { JsonSettings } from 'class-json/JsonSettings';
    import { PropertyInfo } from "class-json/PropertyInfo";
    export interface IJsonConverter {
        supports(val: any, type?: Function): boolean;
        fromJson(jsonValue: any, info?: PropertyInfo, settings?: JsonSettings): any;
        toJson(instanceValue: any, info?: PropertyInfo, settings?: JsonSettings): any;
    }
}

declare module 'class-json/PropertyInfo' {
    import { IJsonConverter } from 'class-json/IJsonConverter';
    export interface PropertyInfo {
        property?: string;
        jsonIgnore?: boolean;
        jsonName?: string;
        Type?: Function;
        ArrayType?: Function;
        MapType?: Function;
        Converter?: Partial<IJsonConverter>;
        options?: any;
    }
}

